@startuml
'https://plantuml.com/class-diagram
title Complete usage [WIP]
center header C# | Collections | Generic
'''''''''''''

class NativeArray{
+<T>[]() {constructor}
}

class ReadOnlyCollection<T>
{
    +Items: IList<T>
}

class List<T>
{
    +Capacity: int {get;}
    
    +AddRange(IEnumerable<T>): void
    +AsReadOnly(): ReadOnlyCollection<T>
    {method}...
    +IndexOf(T): int
    {method}...
}

abstract class Array
{
    +{static}Empty<T>(): T[0]
    +{static}AsReadOnly<T>(array: T[]): ReadOnlyCollection<T>
    {method}...  
}

class  Enumerable<T> <<Static>>
{
    +{static}Empty<T>(): IEnumerable<T>
    +{static}Range<T>(): IEnumerable<T>
    +{static}Repeat<T>(): IEnumerable<T>
}

interface IList<T>
{
    +Item[int] {indexer}
}

interface IReadOnlyList<T>
{
    +Item[int] {indexer}
}

interface IReadOnlyCollection<T>
{
    +Count: int {get;}
}

interface ICollection<T>
{
    +Count: int {get;}
    +IsReadOnly: bool {get;}
    
    +Add(T): void 
    +Clear(): void 
    +Contains(T): bool 
    +CopyTo(T[], int): void
    +Remove(T): void 
}

interface IEnumerable<T>
{
    +GetEnumerator()
}

'''''''''''''

ReadOnlyCollection ..|> IList
ReadOnlyCollection ..|> IReadOnlyList

List..|>IList
List..|>IReadOnlyList

note as NativeN
This class stands for
common C# arrays:
Example: int[] intArray;
end note
NativeN .. NativeArray

note as ArrayN
This class stands for
Array class, a class
C# provides to deal with
array-related operations.
end note
ArrayN .. Array

Note as ArraysN #gold
This both classes
are NOT related!!!
end note
ArraysN .. ArrayN
ArraysN .u. NativeN

NativeArray ...|> IReadOnlyList
NativeArray ...|> IList

ReadOnlyCollection <.. Array

IReadOnlyList--|>IReadOnlyCollection

IList --|> ICollection
ICollection --|> IEnumerable

IReadOnlyCollection --|> IEnumerable

Enumerable ..> IEnumerable

'''''''''''''
right footer (CC-BY) RGV, 2021
@enduml