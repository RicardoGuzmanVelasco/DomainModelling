@startuml
'https://plantuml.com/class-diagram
title Specific-purpose data structures
center header C# | Collections | Generic
'''''''''''''
'''''''''''''
'TODO: DICTIONARIES, ALL HIERARCHY
'TODO: NON GENERICS! https://docs.microsoft.com/en-us/archive/blogs/kcwalina/system-collections-vs-system-collection-generic-and-system-collections-objectmodel
'IENUMERATOR!!!

''''''''''''' Common

class List<T>
{
    +Capacity: int {get;}
    
    +AddRange(IEnumerable<T>): void
    +AsReadOnly(): ReadOnlyCollection<T>
    {method}...
    +IndexOf(T): int
    {method}...
}

interface IList<T>
{
    +Item[int] {indexer}
}

interface IReadOnlyList<T>
{
    +Item[int] {indexer}
}

interface IReadOnlyCollection<T>
{
    +Count: int {get;}
}

interface ICollection<T>
{
    +Count: int {get;}
    +IsReadOnly: bool {get;}
    
    +Add(T): void 
    +Clear(): void 
    +Contains(T): bool 
    +CopyTo(T[], int): void
    +Remove(T): void 
}

interface IEnumerable<T>
{
    +GetEnumerator()
}

interface IComparer<in T> 
interface IEqualityComparer<in T> 

''''''''''''' Sets

interface IReadOnlySet<T> {
+IsSubsetOf(:IEnumerable<T>)
    +IsSupersetOf(:IEnumerable<T>)
    +Overlaps(:IEnumerable<T>)
    {method}...
}
interface ISet<T> 
{
    +Add(:T): bool
    ..
    +IntersectWith(:IEnumerable<T>)
    +UnionWith(:IEnumerable<T>)
    +IsSubsetOf(:IEnumerable<T>)
    +IsSupersetOf(:IEnumerable<T>)
    +Overlaps(:IEnumerable<T>)
    {method}...
}

class SortedSet<T> 


class HashSet<T>


''''''''''''' Dictionaries

''''''''''''' Extensive

class NativeArray
{
+<T>[]() {constructor}
}

class ReadOnlyCollection<T>
{
    +Items: IList<T>
}

class Collection<T> 
{
    +ClearItems()
    +InsertItem(index: int, item: T)
    +RemoveItem(index: int, item: T)
    +SetItem(index: int, item: T)
    {method}...
}

class ObservableCollection<T> 
{
    +CollectionChanged {event}
    +PropertyChanged {event}
}

class LinkedList<T> 
{
    +First: LinkedListNote<T>
    +Last: LinkedListNote<T>
    +AddAfter(:LinkedListNode<T>, T): LinkedListNode<T>
    +AddAfter(:LinkedListNode<T>, :LinkedListNode<T>)
    {method}...
}
class LinkedListNode<T> 
{
    +List: LinkedList<T>
    +Next: LinkedListNode<T>
    +Previous: LinkedListNode<T>
    ..
    +Value: T
}

abstract class Array
{
    +{static}Empty<T>(): T[0]
    +{static}AsReadOnly<T>(array: T[]): ReadOnlyCollection<T>
    {method}...  
}

class Stack<T>
{
    +Peek(): T
    +Pop(): T
    +Push(item: T): void
}

class Queue<T>
{
    +Enqueue(item: T)
    +Dequeue(): T
    +Peek(): T
}

class  Enumerable<T> <<Static>> 
{
    +{static}Empty<T>(): IEnumerable<T>
    +{static}Range<T>(): IEnumerable<T>
    +{static}Repeat<T>(): IEnumerable<T>
}


'''''''''''''
'''''''''''''
'''''''''''''

ReadOnlyCollection ..|> IList
ReadOnlyCollection ..|> IReadOnlyList

List..|>IList
List..|>IReadOnlyList

IList --|> ICollection
ICollection --|> IEnumerable

IReadOnlyList--|>IReadOnlyCollection
IReadOnlyCollection --|> IEnumerable
Enumerable ..> IEnumerable

'''''''''''''

ISet --|> ICollection

IReadOnlySet --|> IReadOnlyCollection

SortedSet ..|> ISet
SortedSet ..|> IReadOnlySet
    SortedSet --> IComparer
    
HashSet ..|> ISet
HashSet ..|> IReadOnlySet
    HashSet --> IEqualityComparer

'''''''''''''

NativeArray ...|> IReadOnlyList
NativeArray ...|> IList

ReadOnlyCollection <.u. Array
'
Stack ..|> IEnumerable
Stack ..|> IReadOnlyCollection

Queue ..|> IEnumerable
Queue ..|> IReadOnlyCollection


Collection ..|> IList 
Collection ..|> IReadOnlyList
Collection --> List

ObservableCollection --|> Collection

LinkedList ..|> ICollection
LinkedList ..|> IReadOnlyCollection
    LinkedList *-- "0..*" LinkedListNode
    LinkedList <.. LinkedListNode

'''''''''''''
right footer (CC-BY) RGV, 2021
@enduml